" judd@redhat.com
" GPTE DevOps Automation
" .vimrc geared towards asciidoc and ansible/yaml
"
" curl -fLo ~/.vim/autoload/plug.vim --create-dirs \
"     https://raw.githubusercontent.com/junegunn/vim-plug/master/plug.vim
"
" start vim
"  :PlugInstall

set nocompatible              " be iMproved, required

""""""""""""""""""""
" Plugins - vim-plug - START
""""""""""""""""""""
call plug#begin('~/.vim/plugged')

"""""
" Kube Stuff
Plug 'c9s/helper.vim'
Plug 'c9s/treemenu.vim'
Plug 'c9s/vikube.vim'
" Esthetics and Syntax and Workflow
Plug 'vifm/vifm.vim'
Plug 'junegunn/fzf'
Plug 'junegunn/fzf.vim'
Plug 'flazz/vim-colorschemes'
Plug 'nathanaelkane/vim-indent-guides'
Plug 'vim-airline/vim-airline'
Plug 'edkolev/tmuxline.vim'
"" amazing async linter - Vim 8 only
Plug 'w0rp/ale'
Plug '907th/vim-auto-save'
"Plug 'scrooloose/nerdtree'
"Plug 'Xuyuanp/nerdtree-git-plugin'
Plug 'airblade/vim-gitgutter'
Plug 'vim-voom/VOoM'
Plug 'jeetsukumaran/vim-buffergator'
""-"Plug 'fholgado/minibufexpl.vim'
""-"Plug 'severin-lemaignan/vim-minimap'  "a sublime text minimap - useless
""-"Plug 'scrooloose/syntastic'

""""""
"" Git
Plug 'tpope/vim-fugitive'
Plug 'idanarye/vim-merginal'
Plug 'tpope/vim-unimpaired'
Plug 'tpope/vim-rhubarb'
Plug 'tpope/vim-vinegar'

""""""
"" Asciidoc
Plug 'matcatc/vim-asciidoc-folding'
""Plug 'asciidoc/asciidoc'
""Plug 'dagwieers/asciidoc-vim'

""""""
"" Ansible
Plug 'pearofducks/ansible-vim'

""""""
"" Yaml
Plug 'pedrohdz/vim-yaml-folds'

"""""
"" Json
Plug 'elzr/vim-json'

"""""
"" Tmux and Terminals
""Plug 'tpope/vim-tbone'
""Plug 'sjl/vitality.vim'
""Plug 'benmills/vimux'

"""""
"" Trello
"Plug 'malithsen/trello-vim'

""""
"" Diagramming
Plug 'gyim/vim-boxdraw'

""""
"" spreadsheet, csv handling
Plug 'chrisbra/csv.vim'

call plug#end()            " required
" filetype plugin indent on    " required

""""""""""""""""""""
" Plugins - vim-plug - END
""""""""""""""""""""


""""""""""""""""""""
" Plugins - Vim8/neoVim - BEGIN
""""""""""""""""""""

if has('nvim')
  Plug 'Shougo/deoplete.nvim', { 'do': ':UpdateRemotePlugins' }
  let g:deoplete#enable_at_startup = 1
" else
"   Plug 'Shougo/deoplete.nvim'
"   Plug 'roxma/nvim-yarp'
"   Plug 'roxma/vim-hug-neovim-rpc'
endif


""""""""""""""""""""
" Short Commands to do great things
""""""""""""""""""""
" <Leader>jf will JSON PRETTY-FORMAT your json.
""""""""""""""""""""
"nnoremap <Leader>fj :%!python -m json.tool<Enter>:set nowrap<Enter>:set ft:javascript<Enter>
:vnoremap <Leader>fj %!python -m json.tool<Enter>

""""""""""""""""""""
" <Leader>64 will base64 decode selection with replace
""""""""""""""""""""
:vnoremap <leader>64 c<c-r>=system('base64 --decode', @")<cr><esc>

""""""""""""""""""""
" enable fuzzy finder
""""""""""""""""""""
if filereadable("/usr/local/opt/fzf/plugin/fzf.vim")
  if executable("/usr/local/opt/fzf/bin/fzf")
    set rtp+=/usr/local/opt/fzf/bin/fzf
  else
    set rtp+=~/.fzf
  endif
endif

""""""""""""""""""""
" set working dir to current file/buffer
""""""""""""""""""""
"set autochdir "may break my world

""""""""""""""""""""
" vertical bar at cursor
""""""""""""""""""""
set cuc "cursorcolumn
set cul "cursorline

""""""""""""""""""""
" grepping with rg ripgrep
""""""""""""""""""""
if executable("rg")
   set grepprg=rg\ --vimgrep\ --no-heading\ --smart-case
   set grepformat=%f:%l:%c:%m,%f:%l:%m
endif

nnoremap <Leader>g :silent lgrep<Space>
nnoremap <silent> [f :lprevious<CR>
nnoremap <silent> ]f :lnext<CR>

" bind K to grep word under cursor
nnoremap K :grep! "\b<C-R><C-W>\b"<CR>:cw<CR>

""""""""""""""""""""
" Enable the Amazing Linter
""""""""""""""""""""
" ale settings - linter
let g:ale_sign_column_always = 1
let g:ale_set_highlights = 1
let g:ale_list_window_size = 5

" Set this Ale support for Airline
let g:airline#extensions#ale#enabled = 1

" Enable completion where available.
let g:ale_completion_enabled = 1

"""""""""""""""""""
" Enable GitGutter
"""""""""""""""""""
let g:gitgutter_enabled = 1


"""""""""""""""""""
" <Leader>g shows commit that introduced current line
map <silent><Leader>g :call setbufvar(winbufnr(popup_atcursor(systemlist("cd " . shellescape(fnamemodify(resolve(expand('%:p')), ":h")) . " && git log --no-merges -n 1 -L " . shellescape(line("v") . "," . line(".") . ":" . resolve(expand("%:p")))), { "padding": [1,1,1,1], "pos": "botleft", "wrap": 0 })), "&filetype", "git")<CR>

"""""""""""""""""""
" Fugitive
"""""""""""""""""""
" diff merge conflicts mappings
" Fugitive Conflict Resolution
nnoremap <leader>gd :Gvdiffsplit!<CR>
nnoremap gdh :diffget //2<CR>
nnoremap gdl :diffget //3<CR>

"""""""""""""""""""
" Make things pretty
""""""""""""""""""""
let g:airline_powerline_fonts = 1
set laststatus=2
set t_Co=256
syntax enable
set tabstop=2
set shiftwidth=2
set expandtab
set number
set relativenumber

" Vim8 only:
" Plugins need to be added to runtimepath before helptags can be generated.
if v:version > 800
  packloadall
endif
" Load all of the helptags now, after plugins have been loaded.
" All messages and errors will be ignored.
silent! helptags ALL

" macvim
set bg=dark
colorscheme default
set guifont=Source\ Code\ Pro\ for\ Powerline:h12
" no macvim shortcut keys
if has("gui_macvim")
  let macvim_skip_cmd_opt_movement = 1
  colorscheme darkblue
endif

" tmuxline
let g:tmuxline_preset = {
      \'a'    : '#S',
      \'b'    : '#W',
      \'c'    : '#H',
      \'win'  : '#I #W',
      \'cwin' : '#I #W',
      \'x'    : '#(/bin/bash ~/.tmux/kube.tmux 250 red cyan)',
      \'y'    : '#(cd #{pane_current_path}; git rev-parse --abbrev-ref HEAD)',
      \'z'    : '#H'}

"      \'w'    : '%a %R',

""""""""""""""""""""
" Workflow
""""""""""""""""""""

" Open file in Chrome
:noremap <silent> <F5> :! open -n -a "Brave Browser" --args --profile-directory="Default" file:///%:p<CR><CR>
" Open file in Chrome - tried to ensure that filenames are escaped - failed
":noremap <silent> <F5> :! open -n -a "Google Chrome" --args --profile-directory="Default"; webapi#http#escape(file:///%:p<CR>)
:map <silent> <F6> vat<Esc>`<df>`>F<df>

" mac clipboard
set clipboard+=unnamed

"""""
" Vimdiff

" vimdiff is unreadable - no syntax highlitghting, whitespace, etc.
if &diff
    map ] ]c
    map [ [c
    set cursorline
    syntax off
    "colorscheme default
    "set diffopt+=iwhite
    highlight DiffAdd    cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    highlight DiffDelete cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    highlight DiffChange cterm=bold ctermfg=10 ctermbg=17 gui=none guifg=bg guibg=Red
    highlight DiffText   cterm=bold ctermfg=10 ctermbg=88 gui=none guifg=bg guibg=Red
endif

"""""
" NERDTREE

" Start NERDTree on startup
"autocmd vimenter * NERDTree
" Jump to the main window, don't start in NERDTree
"autocmd VimEnter * wincmd p
" For mouse click in NERDTree
:set mouse=a
"let g:NERDTreeMouseMode=3
" plugin nerdtree-git
" let g:NERDTreeShowGitStatus = 1

""""""""""""""""""""
" Asciidoc
""""""""""""""""""""

" asciidoc-folding
let g:asciidoc_fold_style = 'nested'
" don't fold when opening files - fold them with zc, unfold with zr
set nofoldenable

""""""""""""""""""""
""""""""""""""""""""
" mappings for asciidoc text mgmnt

"iab _source [source,sh]<CR>----<CR><CR>----<CR>+<CR>Expect output to look similar to this:<CR>+<CR>[source,texinfo]<CR>----<CR><CR>----<CR>

" Wrap vselect with show_solution=true
:vmap ss "zdIifeval::[{show_solution} == true]<CR><C-R>zendif::[]<CR><Esc>
" Wrap vselect with [source,bash]
:vmap sb "zdI+<CR>[source,bash]<CR>----<CR><C-R>z----<CR><Esc>
" Wrap vselect with text and [source,text]
:vmap st "zdI+<CR>.Sample Output:<CR>[source,text]<CR>----<CR><C-R>z----<CR><Esc>
" Wrap vselect with [source,yaml]
:vmap sy "zdI+<CR>[source,yaml]<CR>----<CR><C-R>z----<CR><Esc>
" Wrap vselect with [source,ini]
:vmap si "zdI+<CR>[source,ini]<CR>----<CR><C-R>z----<CR>+<CR><Esc>
" Delete text between ----
:map d-- :silent ,?----?+1d\|,/----/-1d<CR>O
" Wrap vselect with link:<selection>[^]
:vmap sl "zxi link:<C-R>z[^]<Esc>
" Wrap vselect to hide contents
:vmap sq "zdi+++ <details><summary> +++<CR>_Sample Output:_+++ </summary><div> +++<CR><C-R>z+++ </div></details> +++<CR>
" Wrap vselect with ====
:vmap sh "zdI====<CR><C-R>z====<CR><Esc>
"
" New Slide maps
:map nsl i<CR>== <CR><CR><CR>ifdef::showscript[]<CR>Transcript:<CR><CR>endif::showscript[]<CR><CR><Esc>8kA
" New Slide with slide title from vselected text
:map nsn ^"zd$i<CR>== <Esc>"zpa<CR><CR><CR>ifdef::showscript[]<CR>Transcript:<CR>endif::showscript[]<CR><Esc>?==<CR><Esc>
" New Slide with slide transcript from vselected text
:vmap nst "zdI<CR>== SLIDE TITLE<CR><CR><CR>ifdef::showscript[]<CR>Transcript:<CR><CR><C-R>z<CR>endif::showscript[]<CR><CR><Esc>
" wrap vselected text in transcript
:vmap trans "zdI<CR>ifdef::showscript[]<CR><CR>Transcript:<CR><CR><C-R>z<CR><CR>endif::showscript[]<CR><CR><Esc>

" moving between slides - move up/down and put title at home
:map <C-J> zjztzo
:map <C-k> kzkjztzo

" change '.headings' to '=== headings'
:cmap hf :%s/^\.\(\w\+.*\)$/=== \1/
:cmap nhf :%s/^=== \(\w\+.*\)$/.\1/

" delete trailing whitespace and replace three or more consecutive line
" endings with two line endings
:map cleanup <Esc>:%s/\s\+$//e<CR>:%s/\n\{3,}/\r\r/e<CR>

" delete text before [ ] and preservetext found in [ ]
:map spp <Esc>d\[di[va[p " remove everything up to [ ] and preserve insides
:map sap d/[<CR>di[va[p

""""""""""""""""""""
""""""""""""""""""""
"
""""""""""""""""""""
" Ansible
""""""""""""""""""""
" Plug-in vim-ansible-yaml brings up the module documentation if your cursor is in the module name
" let g:ansible_options = {'documentation_mapping': '<Leader>x'}
" Remap user-specified binding to look in ansible-doc for keyword under cursor
"nmap <Leader>J :splitbelow | sview |r !ansible-doc <C-R><C-W> *<CR>

"let g:ansible_yamlKeyName = 'yamlKey'
"let g:ansible_extra_keyworkds_highlight = 1
let g:ansible_goto_role_paths = './roles,../_common/roles'

function! FindAnsibleRoleUnderCursor()
  if exists("g:ansible_goto_role_paths")
    let l:role_paths = g:ansible_goto_role_paths
  else
    let l:role_paths = "./roles"
  endif
  let l:tasks_main = expand("<cfile>") . "/tasks/main.yml"
  let l:found_role_path = findfile(l:tasks_main, l:role_paths)
  if l:found_role_path == ""
    echo l:tasks_main . " not found"
  else
    execute "edit " . fnameescape(l:found_role_path)
  endif
endfunction

au BufRead,BufNewFile */ansible/*.yml vnoremap <leader>gr :call FindAnsibleRoleUnderCursor()<CR>

""""""""""""""""""""
" Tmux and Terminals
""""""""""""""""""""

"tbone.vim
"Basic tmux support for Vim.
":Tmux lets you call any old tmux command (with really good tab complete).
":Tyank and :Tput give you direct access to tmux buffers.
":Twrite sends a chunk of text to another pane. Give an argument like windowtitle.2, top-right, or last, or let it default to the previously given argument.
":Tattach lets you use a specific tmux session from outside of it.

""""""""""""""""""""
" Commented out: Possibly useful
""""""""""""""""""""
"
""""""""""""""
" Movement Shortcuts
" Move a line of text using ALT+[jk] or Comamnd+[jk] on mac
"nmap <M-j> mz:m+<cr>`z
"nmap <M-k> mz:m-2<cr>`z
"vmap <M-j> :m'>+<cr>`<my`>mzgv`yo`z
"vmap <M-k> :m'<-2<cr>`>my`<mzgv`yo`z
"
" find next ==
":map <silent> <F1> <Esc>/^==\s<CR>z.

"""""
" nerdtree ignore - everything but _Lab_
"let NERDTreeIgnore=['
"
" Fix some mouse reporting for big terminals
"if has('mouse_sgr')
" set ttymouse=sgr
"endif
"

""""""
" Red Hat GPTE
" Shortcuts for assessments:

" Turn the line FALSE
nnoremap <Leader>F <Esc>$6bcwFALSE<Esc>
" Turn the line TRUE
nnoremap <Leader>T <Esc>$6bcwTRUE<Esc>
" Turn the line 1 100 aka correct
nnoremap <Leader>1 <Esc>$2bcw100<Esc>3bcw1<Esc>
" Turn the line 0 0 aka incorrect
nnoremap <Leader>0 <Esc>$2bcw0<Esc>2bcw0<Esc>
" TRUE/FALSE line
nnoremap <Leader>X <Esc>^iCOURSE<bar>COURSEMODULE00<bar>5<bar>.<bar><bar><bar>TRUE<bar><bar><bar>1<bar>100<bar><bar><bar><Esc>
" Multiple Choice line
nnoremap <Leader>M <Esc>^iCOURSE<bar>COURSEMODULE00<bar>1<bar>?<bar><bar><bar>Thing1<bar><bar><bar>1<bar>100<bar><bar><bar><Esc>

" Shortcuts for Product Names
nnoremap <Leader>O /OpenShift<Esc>cwRHOCP<Esc>

""""""
"FROM ASCIIDOC PAGE
""""""
"" Use bold bright fonts.
"set background=dark

" Show tabs and trailing characters.
set listchars=tab:»·,trail:·,extends:↷,precedes:↶,nbsp:⁔
"set listchars=tab:»·,trail:·,eol:¬,trail:␣,extends:↷,precedes:↶,nbsp:⁔
"set listchars=eol:•,tab:→\ ,trail:␣,extends:↷,precedes:↶,nbsp:⁔
set list

" Reformat paragraphs and list.
"nnoremap <Leader>r gq}

" Delete trailing white space and Dos-returns and to expand tabs to spaces.
"nnoremap <Leader>t :set et<CR>:retab!<CR>:%s/[\r \t]\+$//<CR>

" autocmd BufRead,BufNewFile *.txt,*.asciidoc,README,TODO,CHANGELOG,NOTES,ABOUT
        "\ setlocal autoindent expandtab tabstop=8 softtabstop=2 shiftwidth=2 filetype=asciidoc
        "\ textwidth=70 wrap formatoptions=tcqn
        "\ formatlistpat=^\\s*\\d\\+\\.\\s\\+\\\\|^\\s*<\\d\\+>\\s\\+\\\\|^\\s*[a-zA-Z.]\\.\\s\\+\\\\|^\\s*[ivxIVX]\\+\\.\\s\\+
        "\ comments=s1:/*,ex:*/,://,b:#,:%,:XCOMM,fb:-,fb:*,fb:+,fb:.,fb:>

if v:version < 700 || exists('loaded_switchcolor') || &cp
	finish
endif

let loaded_switchcolor = 1

let paths = split(globpath(&runtimepath, 'colors/*.vim'), "\n")
let s:swcolors = map(paths, 'fnamemodify(v:val, ":t:r")')
let s:swskip = [ '256-jungle', '3dglasses', 'calmar256-light', 'coots-beauty-256', 'grb256' ]
let s:swback = 0    " background variants light/dark was not yet switched
let s:swindex = 0

function! SwitchColor(swinc)

	" if have switched background: dark/light
	if (s:swback == 1)
		let s:swback = 0
		let s:swindex += a:swinc
		let i = s:swindex % len(s:swcolors)

		" in skip list
		if (index(s:swskip, s:swcolors[i]) == -1)
			execute "colorscheme " . s:swcolors[i]
		else
			return SwitchColor(a:swinc)
		endif

	else
		let s:swback = 1
		if (&background == "light")
			execute "set background=dark"
		else
			execute "set background=light"
		endif

		" roll back if background is not supported
		if (!exists('g:colors_name'))
			return SwitchColor(a:swinc)
		endif
	endif

	" show current name on screen. :h :echo-redraw
	redraw
	execute "colorscheme"
endfunction

 map <F8>        :call SwitchColor(1)<CR>
imap <F8>   <Esc>:call SwitchColor(1)<CR>

 map <S-F8>      :call SwitchColor(-1)<CR>
imap <S-F8> <Esc>:call SwitchColor(-1)<CR>

